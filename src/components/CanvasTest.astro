<div class="flex justify-center opacity-80">
  <div
    class="w-[300px] h-[300px] from-neutral-500 to-90% top-[200px] to-navy blur-[100px] absolute z-10 bg-gradient-to-br"
  >
  </div>
  <canvas class="" id="hero">wow</canvas>
</div>

<style>
  #hero {
    margin: 0;
    padding: 0;
    position: absolute;
    background: #212539;
    z-index: 0;
  }
</style>

<script>
  const cvs: HTMLCanvasElement = document.querySelector("canvas")!;

  const c: CanvasRenderingContext2D = cvs!.getContext("2d")!;

  cvs.width = Math.min(1400, window.innerWidth);
  cvs.height = window.innerHeight;

  window.addEventListener("resize", function () {
    cvs.width = Math.min(1400, window.innerWidth);
    cvs.height = window.innerHeight;
  });

  interface MouseCoordinate {
    x: number;
    y: number;
  }

  let mouse: MouseCoordinate = {
    x: 0,
    y: 0,
  };
  function getMousePos(cvs: any, evt: any) {
    var rect = cvs.getBoundingClientRect();
    return {
      x: evt.clientX - rect.left,
      y: evt.clientY - rect.top,
    };
  }
  window.addEventListener("mousemove", function (e: MouseEvent) {
    mouse.x = e.x;
    mouse.y = e.y;
  });
  class Circle {
    x: number;
    y: number;
    speed: number;
    vx: number;
    vy: number;
    width: number;
    minWidth: number;
    maxWidth: number;
    color: string;
    constructor(x: number, y: number, width: number) {
      this.x = x;
      this.y = y;
      this.speed = 2;
      this.vx = 0;
      this.vy = 0;
      this.width = width;
      this.minWidth = width;
      this.maxWidth = width * 1.6;

      this.color = "#F2EBE3";
    }

    draw = () => {
      c.beginPath();

      c.arc(
        this.x * cvs.width,
        this.y * cvs.height,
        this.width,
        0,
        2 * Math.PI
      );

      c.fillStyle = this.color;
      c.fill();

      this.update();
    };

    update = () => {
      // interactivity

      if (
        mouse.x - this.x * cvs.width < 10 &&
        mouse.x - this.x * cvs.width > -10 &&
        mouse.y - this.y * cvs.height < 10 &&
        mouse.y - this.y * cvs.height > -10 &&
        this.width < this.maxWidth
      ) {
        this.width += 0.5;
      } else if (this.width > this.minWidth) {
        this.width -= 0.5;
      }

      const dx = mouse.x - this.x * cvs.width;
      const dy = mouse.y - this.y * cvs.height;
      const distance = Math.sqrt(dx * dx + dy * dy);

      if (distance < 100) {
        this.vx = (mouse.x - this.x * cvs.width) / 50;
        this.vy = (mouse.y - this.y * cvs.height) / 50;
      }
    };
  }
  let animationFrame = 0;
  let circleArray: Circle[] = [];
  let width = 8;
  let x = 0.8;
  let y = 0.3;
  circleArray.push(new Circle(x, y, width));
  x = 0.9;
  y = 0.35;

  circleArray.push(new Circle(x, y, width));

  function animate() {
    requestAnimationFrame(animate);
    c.clearRect(0, 0, window.innerWidth, window.innerHeight);

    let prevCircle: Circle | null = null;
    circleArray.forEach((circle) => {
      circle.x += 0.00004 * Math.sin(0.02 * animationFrame);

      if (prevCircle) {
        c.beginPath(); // Start a new path
        c.strokeStyle = "#F2EBE3";
        c.lineWidth = 2;
        c.moveTo(prevCircle.x * cvs.width, prevCircle.y * cvs.height);
        c.lineTo(circle.x * cvs.width, circle.y * cvs.height); // Draw a line to (150, 100)
        c.stroke(); // Render the path
      }
      circle.draw();
      prevCircle = circle;
    });
    animationFrame++;
  }

  animate();
</script>
